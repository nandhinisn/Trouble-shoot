let express,cors,csrf,cookieParser,dotenv,readdirSync,mongoose;_fb5‍.w("express",[["default",["express"],function(v){express=v}]]);_fb5‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_fb5‍.w("csurf",[["default",["csrf"],function(v){csrf=v}]]);_fb5‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_fb5‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_fb5‍.w("fs",[["readdirSync",["readdirSync"],function(v){readdirSync=v}]]);_fb5‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);






const morgan = require('morgan')
require("dotenv").config();


const csrfProtection = csrf({ cookie: true });
// Create express app
const app = express();

// DB connection
mongoose
  .connect(process.env.DATABASE)
  .then(() => console.log("DB connected"))
  .catch((err) => _fb5‍.g.console.log("DB Error => ", err));


// Apply middleware
app.use(cors());
app.use(express.json());
app.use(cookieParser());
app.use(morgan("dev"));


const myMiddleware = (req, res, next) => {
  console.log("This is my own middleware");
  // You can add some custom processing here if needed
  next();
};

app.use(myMiddleware); // Using the custom middleware

// Route
readdirSync("./routes").map((r) =>
  app.use("/api", require(`./routes/${r}`)));

// csrf
app.use(csrfProtection);

app.get("/api/csrf-token", (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});

// Port
const port = process.env.PORT || 8000;

app.listen(port, () => console.log(`Server is running on port ${port}`));

let User,hashPassword,comparePassword,jwt,AWSSes;_c41‍.x([["Register",()=>Register],["Login",()=>Login],["Logout",()=>Logout],["currentUser",()=>currentUser]]);_c41‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_c41‍.w("../utilis/auth",[["hashPassword",["hashPassword"],function(v){hashPassword=v}],["comparePassword",["comparePassword"],function(v){comparePassword=v}]]);_c41‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_c41‍.w("@aws-sdk/client-ses",[["SES",["AWSSes"],function(v){AWSSes=v}]]);







const awsConfig = {
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION,
  apiVersion: process.env.AWS_API_VERSION,
};

const sesClient = new AWSSes(awsConfig);

       const Register = async (req, res) => {
  try {
    // console.log(req.body);
    const { name, email, password } = req.body;
    // validation
    if (!name) return res.status(400).send("Name is required");
    if (!password || password.length < 6) {
      return res
        .status(400)
        .send("Password is required and should be min 6 characters long");
    }
    let userExist = await User.findOne({ email }).exec();
    if (userExist) return res.status(400).send("Email is taken");

    // hash password
    const hashedPassword = await hashPassword(password);

    // register
    const user = new User({
      name,
      email,
      password: hashedPassword,
    });
    await user.save();
    // console.log("saved user", user);
    return res.json({ ok: true });
  } catch (err) {
    _c41‍.g.console.log(err);
    return res.status(400).send("Error. Try again.");
  }
};


       const Login = async (req, res) => {
    try {
      // console.log(req.body);
      const { email, password } = req.body;
      // check if our db has user with that email
      const user = await User.findOne({ email }).exec();
      if (!user) return res.status(400).send("No user found");
      // check password
      const match = await comparePassword(password, user.password);
      // create signed jwt
    // create signed jwt
    const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });
    // return user and token to client, exclude hashed password
    user.password = undefined;
    // send token in cookie
    res.cookie("token", token, {
      httpOnly: true,
      // secure: true, // only works on https
    });
    // send user as json response
    res.json(user);
  } catch (err) {
    _c41‍.g.console.log(err);
    return res.status(400).send("Error. Try again.");
  }
};
  
         const Logout = async (req, res) => {
    try {
      res.clearCookie("token");
      return res.json({ message: "Signout success" });
    } catch (err) {
      _c41‍.g.console.log(err);
    }
  };
 
         const currentUser = async (req, res) => {
    try {
      const user = await User.findById(req.user._id).select("-password").exec();
      _c41‍.g.console.log("CURRENT_USER", user);
      return res.json(user);
    } catch (err) {
      _c41‍.g.console.log(err);
    }
  };
  